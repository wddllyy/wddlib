// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_connsvr.proto

#ifndef PROTOBUF_protocol_5fconnsvr_2eproto__INCLUDED
#define PROTOBUF_protocol_5fconnsvr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ConnSvr_Conf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

class StartReq;
class StartRsp;
class Stop;
class Route;
class MsgNtf;
class MsgHead;
class ConnsvrMsg;

enum MsgCmd {
  connsvr_start_req = 0,
  connsvr_start_rsp = 1,
  connsvr_stop = 2,
  connsvr_route = 3,
  connsvr_msg_ntf = 4,
  connsvr_cmd_count = 5
};
bool MsgCmd_IsValid(int value);
const MsgCmd MsgCmd_MIN = connsvr_start_req;
const MsgCmd MsgCmd_MAX = connsvr_cmd_count;
const int MsgCmd_ARRAYSIZE = MsgCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgCmd_descriptor();
inline const ::std::string& MsgCmd_Name(MsgCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgCmd_descriptor(), value);
}
inline bool MsgCmd_Parse(
    const ::std::string& name, MsgCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgCmd>(
    MsgCmd_descriptor(), name, value);
}
// ===================================================================

class StartReq : public ::google::protobuf::Message {
 public:
  StartReq();
  virtual ~StartReq();

  StartReq(const StartReq& from);

  inline StartReq& operator=(const StartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartReq& default_instance();

  void Swap(StartReq* other);

  // implements Message ----------------------------------------------

  StartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartReq& from);
  void MergeFrom(const StartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 currentconn = 1;
  inline bool has_currentconn() const;
  inline void clear_currentconn();
  static const int kCurrentconnFieldNumber = 1;
  inline ::google::protobuf::uint32 currentconn() const;
  inline void set_currentconn(::google::protobuf::uint32 value);

  // required uint32 channelcnt = 2;
  inline bool has_channelcnt() const;
  inline void clear_channelcnt();
  static const int kChannelcntFieldNumber = 2;
  inline ::google::protobuf::uint32 channelcnt() const;
  inline void set_channelcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.StartReq)
 private:
  inline void set_has_currentconn();
  inline void clear_has_currentconn();
  inline void set_has_channelcnt();
  inline void clear_has_channelcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 currentconn_;
  ::google::protobuf::uint32 channelcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static StartReq* default_instance_;
};
// -------------------------------------------------------------------

class StartRsp : public ::google::protobuf::Message {
 public:
  StartRsp();
  virtual ~StartRsp();

  StartRsp(const StartRsp& from);

  inline StartRsp& operator=(const StartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartRsp& default_instance();

  void Swap(StartRsp* other);

  // implements Message ----------------------------------------------

  StartRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartRsp& from);
  void MergeFrom(const StartRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 accept = 1;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline ::google::protobuf::int32 accept() const;
  inline void set_accept(::google::protobuf::int32 value);

  // required uint32 routechannel = 2;
  inline bool has_routechannel() const;
  inline void clear_routechannel();
  static const int kRoutechannelFieldNumber = 2;
  inline ::google::protobuf::uint32 routechannel() const;
  inline void set_routechannel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.StartRsp)
 private:
  inline void set_has_accept();
  inline void clear_has_accept();
  inline void set_has_routechannel();
  inline void clear_has_routechannel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 accept_;
  ::google::protobuf::uint32 routechannel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static StartRsp* default_instance_;
};
// -------------------------------------------------------------------

class Stop : public ::google::protobuf::Message {
 public:
  Stop();
  virtual ~Stop();

  Stop(const Stop& from);

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stop& default_instance();

  void Swap(Stop* other);

  // implements Message ----------------------------------------------

  Stop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.Stop)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static Stop* default_instance_;
};
// -------------------------------------------------------------------

class Route : public ::google::protobuf::Message {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  void Swap(Route* other);

  // implements Message ----------------------------------------------

  Route* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 routechannel = 1;
  inline bool has_routechannel() const;
  inline void clear_routechannel();
  static const int kRoutechannelFieldNumber = 1;
  inline ::google::protobuf::uint32 routechannel() const;
  inline void set_routechannel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.Route)
 private:
  inline void set_has_routechannel();
  inline void clear_has_routechannel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 routechannel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static Route* default_instance_;
};
// -------------------------------------------------------------------

class MsgNtf : public ::google::protobuf::Message {
 public:
  MsgNtf();
  virtual ~MsgNtf();

  MsgNtf(const MsgNtf& from);

  inline MsgNtf& operator=(const MsgNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgNtf& default_instance();

  void Swap(MsgNtf* other);

  // implements Message ----------------------------------------------

  MsgNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgNtf& from);
  void MergeFrom(const MsgNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes buff = 1;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 1;
  inline const ::std::string& buff() const;
  inline void set_buff(const ::std::string& value);
  inline void set_buff(const char* value);
  inline void set_buff(const void* value, size_t size);
  inline ::std::string* mutable_buff();
  inline ::std::string* release_buff();
  inline void set_allocated_buff(::std::string* buff);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.MsgNtf)
 private:
  inline void set_has_buff();
  inline void clear_has_buff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* buff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static MsgNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();

  void Swap(MsgHead* other);

  // implements Message ----------------------------------------------

  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 msglen = 1;
  inline bool has_msglen() const;
  inline void clear_msglen();
  static const int kMsglenFieldNumber = 1;
  inline ::google::protobuf::uint32 msglen() const;
  inline void set_msglen(::google::protobuf::uint32 value);

  // required fixed32 cmdid = 2;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 2;
  inline ::google::protobuf::uint32 cmdid() const;
  inline void set_cmdid(::google::protobuf::uint32 value);

  // required fixed32 connid = 3;
  inline bool has_connid() const;
  inline void clear_connid();
  static const int kConnidFieldNumber = 3;
  inline ::google::protobuf::uint32 connid() const;
  inline void set_connid(::google::protobuf::uint32 value);

  // required uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.MsgHead)
 private:
  inline void set_has_msglen();
  inline void clear_has_msglen();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_connid();
  inline void clear_has_connid();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 msglen_;
  ::google::protobuf::uint32 cmdid_;
  ::google::protobuf::uint32 connid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// -------------------------------------------------------------------

class ConnsvrMsg : public ::google::protobuf::Message {
 public:
  ConnsvrMsg();
  virtual ~ConnsvrMsg();

  ConnsvrMsg(const ConnsvrMsg& from);

  inline ConnsvrMsg& operator=(const ConnsvrMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnsvrMsg& default_instance();

  void Swap(ConnsvrMsg* other);

  // implements Message ----------------------------------------------

  ConnsvrMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnsvrMsg& from);
  void MergeFrom(const ConnsvrMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConnSvr_Conf.MsgHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::ConnSvr_Conf::MsgHead& head() const;
  inline ::ConnSvr_Conf::MsgHead* mutable_head();
  inline ::ConnSvr_Conf::MsgHead* release_head();
  inline void set_allocated_head(::ConnSvr_Conf::MsgHead* head);

  // optional .ConnSvr_Conf.StartReq startreq = 2;
  inline bool has_startreq() const;
  inline void clear_startreq();
  static const int kStartreqFieldNumber = 2;
  inline const ::ConnSvr_Conf::StartReq& startreq() const;
  inline ::ConnSvr_Conf::StartReq* mutable_startreq();
  inline ::ConnSvr_Conf::StartReq* release_startreq();
  inline void set_allocated_startreq(::ConnSvr_Conf::StartReq* startreq);

  // optional .ConnSvr_Conf.StartRsp startrsp = 3;
  inline bool has_startrsp() const;
  inline void clear_startrsp();
  static const int kStartrspFieldNumber = 3;
  inline const ::ConnSvr_Conf::StartRsp& startrsp() const;
  inline ::ConnSvr_Conf::StartRsp* mutable_startrsp();
  inline ::ConnSvr_Conf::StartRsp* release_startrsp();
  inline void set_allocated_startrsp(::ConnSvr_Conf::StartRsp* startrsp);

  // optional .ConnSvr_Conf.Stop stop = 4;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 4;
  inline const ::ConnSvr_Conf::Stop& stop() const;
  inline ::ConnSvr_Conf::Stop* mutable_stop();
  inline ::ConnSvr_Conf::Stop* release_stop();
  inline void set_allocated_stop(::ConnSvr_Conf::Stop* stop);

  // optional .ConnSvr_Conf.Route route = 5;
  inline bool has_route() const;
  inline void clear_route();
  static const int kRouteFieldNumber = 5;
  inline const ::ConnSvr_Conf::Route& route() const;
  inline ::ConnSvr_Conf::Route* mutable_route();
  inline ::ConnSvr_Conf::Route* release_route();
  inline void set_allocated_route(::ConnSvr_Conf::Route* route);

  // optional .ConnSvr_Conf.MsgNtf msgntf = 6;
  inline bool has_msgntf() const;
  inline void clear_msgntf();
  static const int kMsgntfFieldNumber = 6;
  inline const ::ConnSvr_Conf::MsgNtf& msgntf() const;
  inline ::ConnSvr_Conf::MsgNtf* mutable_msgntf();
  inline ::ConnSvr_Conf::MsgNtf* release_msgntf();
  inline void set_allocated_msgntf(::ConnSvr_Conf::MsgNtf* msgntf);

  // @@protoc_insertion_point(class_scope:ConnSvr_Conf.ConnsvrMsg)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_startreq();
  inline void clear_has_startreq();
  inline void set_has_startrsp();
  inline void clear_has_startrsp();
  inline void set_has_stop();
  inline void clear_has_stop();
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_msgntf();
  inline void clear_has_msgntf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ConnSvr_Conf::MsgHead* head_;
  ::ConnSvr_Conf::StartReq* startreq_;
  ::ConnSvr_Conf::StartRsp* startrsp_;
  ::ConnSvr_Conf::Stop* stop_;
  ::ConnSvr_Conf::Route* route_;
  ::ConnSvr_Conf::MsgNtf* msgntf_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_AssignDesc_protocol_5fconnsvr_2eproto();
  friend void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto();

  void InitAsDefaultInstance();
  static ConnsvrMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// StartReq

// required uint32 currentconn = 1;
inline bool StartReq::has_currentconn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartReq::set_has_currentconn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartReq::clear_has_currentconn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartReq::clear_currentconn() {
  currentconn_ = 0u;
  clear_has_currentconn();
}
inline ::google::protobuf::uint32 StartReq::currentconn() const {
  return currentconn_;
}
inline void StartReq::set_currentconn(::google::protobuf::uint32 value) {
  set_has_currentconn();
  currentconn_ = value;
}

// required uint32 channelcnt = 2;
inline bool StartReq::has_channelcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartReq::set_has_channelcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartReq::clear_has_channelcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartReq::clear_channelcnt() {
  channelcnt_ = 0u;
  clear_has_channelcnt();
}
inline ::google::protobuf::uint32 StartReq::channelcnt() const {
  return channelcnt_;
}
inline void StartReq::set_channelcnt(::google::protobuf::uint32 value) {
  set_has_channelcnt();
  channelcnt_ = value;
}

// -------------------------------------------------------------------

// StartRsp

// required int32 accept = 1;
inline bool StartRsp::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartRsp::set_has_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartRsp::clear_has_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartRsp::clear_accept() {
  accept_ = 0;
  clear_has_accept();
}
inline ::google::protobuf::int32 StartRsp::accept() const {
  return accept_;
}
inline void StartRsp::set_accept(::google::protobuf::int32 value) {
  set_has_accept();
  accept_ = value;
}

// required uint32 routechannel = 2;
inline bool StartRsp::has_routechannel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartRsp::set_has_routechannel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartRsp::clear_has_routechannel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartRsp::clear_routechannel() {
  routechannel_ = 0u;
  clear_has_routechannel();
}
inline ::google::protobuf::uint32 StartRsp::routechannel() const {
  return routechannel_;
}
inline void StartRsp::set_routechannel(::google::protobuf::uint32 value) {
  set_has_routechannel();
  routechannel_ = value;
}

// -------------------------------------------------------------------

// Stop

// required uint64 timestamp = 1;
inline bool Stop::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stop::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stop::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stop::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Stop::timestamp() const {
  return timestamp_;
}
inline void Stop::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// Route

// required uint32 routechannel = 1;
inline bool Route::has_routechannel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Route::set_has_routechannel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Route::clear_has_routechannel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Route::clear_routechannel() {
  routechannel_ = 0u;
  clear_has_routechannel();
}
inline ::google::protobuf::uint32 Route::routechannel() const {
  return routechannel_;
}
inline void Route::set_routechannel(::google::protobuf::uint32 value) {
  set_has_routechannel();
  routechannel_ = value;
}

// -------------------------------------------------------------------

// MsgNtf

// required bytes buff = 1;
inline bool MsgNtf::has_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgNtf::set_has_buff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgNtf::clear_has_buff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgNtf::clear_buff() {
  if (buff_ != &::google::protobuf::internal::kEmptyString) {
    buff_->clear();
  }
  clear_has_buff();
}
inline const ::std::string& MsgNtf::buff() const {
  return *buff_;
}
inline void MsgNtf::set_buff(const ::std::string& value) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::kEmptyString) {
    buff_ = new ::std::string;
  }
  buff_->assign(value);
}
inline void MsgNtf::set_buff(const char* value) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::kEmptyString) {
    buff_ = new ::std::string;
  }
  buff_->assign(value);
}
inline void MsgNtf::set_buff(const void* value, size_t size) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::kEmptyString) {
    buff_ = new ::std::string;
  }
  buff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgNtf::mutable_buff() {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::kEmptyString) {
    buff_ = new ::std::string;
  }
  return buff_;
}
inline ::std::string* MsgNtf::release_buff() {
  clear_has_buff();
  if (buff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buff_;
    buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgNtf::set_allocated_buff(::std::string* buff) {
  if (buff_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_;
  }
  if (buff) {
    set_has_buff();
    buff_ = buff;
  } else {
    clear_has_buff();
    buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsgHead

// required fixed32 msglen = 1;
inline bool MsgHead::has_msglen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHead::set_has_msglen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHead::clear_has_msglen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHead::clear_msglen() {
  msglen_ = 0u;
  clear_has_msglen();
}
inline ::google::protobuf::uint32 MsgHead::msglen() const {
  return msglen_;
}
inline void MsgHead::set_msglen(::google::protobuf::uint32 value) {
  set_has_msglen();
  msglen_ = value;
}

// required fixed32 cmdid = 2;
inline bool MsgHead::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHead::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHead::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHead::clear_cmdid() {
  cmdid_ = 0u;
  clear_has_cmdid();
}
inline ::google::protobuf::uint32 MsgHead::cmdid() const {
  return cmdid_;
}
inline void MsgHead::set_cmdid(::google::protobuf::uint32 value) {
  set_has_cmdid();
  cmdid_ = value;
}

// required fixed32 connid = 3;
inline bool MsgHead::has_connid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHead::set_has_connid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHead::clear_has_connid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHead::clear_connid() {
  connid_ = 0u;
  clear_has_connid();
}
inline ::google::protobuf::uint32 MsgHead::connid() const {
  return connid_;
}
inline void MsgHead::set_connid(::google::protobuf::uint32 value) {
  set_has_connid();
  connid_ = value;
}

// required uint32 port = 4;
inline bool MsgHead::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgHead::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgHead::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgHead::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 MsgHead::port() const {
  return port_;
}
inline void MsgHead::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required string ip = 5;
inline bool MsgHead::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgHead::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgHead::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgHead::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MsgHead::ip() const {
  return *ip_;
}
inline void MsgHead::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MsgHead::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MsgHead::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MsgHead::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgHead::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConnsvrMsg

// required .ConnSvr_Conf.MsgHead head = 1;
inline bool ConnsvrMsg::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnsvrMsg::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnsvrMsg::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnsvrMsg::clear_head() {
  if (head_ != NULL) head_->::ConnSvr_Conf::MsgHead::Clear();
  clear_has_head();
}
inline const ::ConnSvr_Conf::MsgHead& ConnsvrMsg::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ConnSvr_Conf::MsgHead* ConnsvrMsg::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::ConnSvr_Conf::MsgHead;
  return head_;
}
inline ::ConnSvr_Conf::MsgHead* ConnsvrMsg::release_head() {
  clear_has_head();
  ::ConnSvr_Conf::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_head(::ConnSvr_Conf::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional .ConnSvr_Conf.StartReq startreq = 2;
inline bool ConnsvrMsg::has_startreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnsvrMsg::set_has_startreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnsvrMsg::clear_has_startreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnsvrMsg::clear_startreq() {
  if (startreq_ != NULL) startreq_->::ConnSvr_Conf::StartReq::Clear();
  clear_has_startreq();
}
inline const ::ConnSvr_Conf::StartReq& ConnsvrMsg::startreq() const {
  return startreq_ != NULL ? *startreq_ : *default_instance_->startreq_;
}
inline ::ConnSvr_Conf::StartReq* ConnsvrMsg::mutable_startreq() {
  set_has_startreq();
  if (startreq_ == NULL) startreq_ = new ::ConnSvr_Conf::StartReq;
  return startreq_;
}
inline ::ConnSvr_Conf::StartReq* ConnsvrMsg::release_startreq() {
  clear_has_startreq();
  ::ConnSvr_Conf::StartReq* temp = startreq_;
  startreq_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_startreq(::ConnSvr_Conf::StartReq* startreq) {
  delete startreq_;
  startreq_ = startreq;
  if (startreq) {
    set_has_startreq();
  } else {
    clear_has_startreq();
  }
}

// optional .ConnSvr_Conf.StartRsp startrsp = 3;
inline bool ConnsvrMsg::has_startrsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnsvrMsg::set_has_startrsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnsvrMsg::clear_has_startrsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnsvrMsg::clear_startrsp() {
  if (startrsp_ != NULL) startrsp_->::ConnSvr_Conf::StartRsp::Clear();
  clear_has_startrsp();
}
inline const ::ConnSvr_Conf::StartRsp& ConnsvrMsg::startrsp() const {
  return startrsp_ != NULL ? *startrsp_ : *default_instance_->startrsp_;
}
inline ::ConnSvr_Conf::StartRsp* ConnsvrMsg::mutable_startrsp() {
  set_has_startrsp();
  if (startrsp_ == NULL) startrsp_ = new ::ConnSvr_Conf::StartRsp;
  return startrsp_;
}
inline ::ConnSvr_Conf::StartRsp* ConnsvrMsg::release_startrsp() {
  clear_has_startrsp();
  ::ConnSvr_Conf::StartRsp* temp = startrsp_;
  startrsp_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_startrsp(::ConnSvr_Conf::StartRsp* startrsp) {
  delete startrsp_;
  startrsp_ = startrsp;
  if (startrsp) {
    set_has_startrsp();
  } else {
    clear_has_startrsp();
  }
}

// optional .ConnSvr_Conf.Stop stop = 4;
inline bool ConnsvrMsg::has_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnsvrMsg::set_has_stop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnsvrMsg::clear_has_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnsvrMsg::clear_stop() {
  if (stop_ != NULL) stop_->::ConnSvr_Conf::Stop::Clear();
  clear_has_stop();
}
inline const ::ConnSvr_Conf::Stop& ConnsvrMsg::stop() const {
  return stop_ != NULL ? *stop_ : *default_instance_->stop_;
}
inline ::ConnSvr_Conf::Stop* ConnsvrMsg::mutable_stop() {
  set_has_stop();
  if (stop_ == NULL) stop_ = new ::ConnSvr_Conf::Stop;
  return stop_;
}
inline ::ConnSvr_Conf::Stop* ConnsvrMsg::release_stop() {
  clear_has_stop();
  ::ConnSvr_Conf::Stop* temp = stop_;
  stop_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_stop(::ConnSvr_Conf::Stop* stop) {
  delete stop_;
  stop_ = stop;
  if (stop) {
    set_has_stop();
  } else {
    clear_has_stop();
  }
}

// optional .ConnSvr_Conf.Route route = 5;
inline bool ConnsvrMsg::has_route() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnsvrMsg::set_has_route() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnsvrMsg::clear_has_route() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnsvrMsg::clear_route() {
  if (route_ != NULL) route_->::ConnSvr_Conf::Route::Clear();
  clear_has_route();
}
inline const ::ConnSvr_Conf::Route& ConnsvrMsg::route() const {
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::ConnSvr_Conf::Route* ConnsvrMsg::mutable_route() {
  set_has_route();
  if (route_ == NULL) route_ = new ::ConnSvr_Conf::Route;
  return route_;
}
inline ::ConnSvr_Conf::Route* ConnsvrMsg::release_route() {
  clear_has_route();
  ::ConnSvr_Conf::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_route(::ConnSvr_Conf::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
}

// optional .ConnSvr_Conf.MsgNtf msgntf = 6;
inline bool ConnsvrMsg::has_msgntf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnsvrMsg::set_has_msgntf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnsvrMsg::clear_has_msgntf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnsvrMsg::clear_msgntf() {
  if (msgntf_ != NULL) msgntf_->::ConnSvr_Conf::MsgNtf::Clear();
  clear_has_msgntf();
}
inline const ::ConnSvr_Conf::MsgNtf& ConnsvrMsg::msgntf() const {
  return msgntf_ != NULL ? *msgntf_ : *default_instance_->msgntf_;
}
inline ::ConnSvr_Conf::MsgNtf* ConnsvrMsg::mutable_msgntf() {
  set_has_msgntf();
  if (msgntf_ == NULL) msgntf_ = new ::ConnSvr_Conf::MsgNtf;
  return msgntf_;
}
inline ::ConnSvr_Conf::MsgNtf* ConnsvrMsg::release_msgntf() {
  clear_has_msgntf();
  ::ConnSvr_Conf::MsgNtf* temp = msgntf_;
  msgntf_ = NULL;
  return temp;
}
inline void ConnsvrMsg::set_allocated_msgntf(::ConnSvr_Conf::MsgNtf* msgntf) {
  delete msgntf_;
  msgntf_ = msgntf;
  if (msgntf) {
    set_has_msgntf();
  } else {
    clear_has_msgntf();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnSvr_Conf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnSvr_Conf::MsgCmd>() {
  return ::ConnSvr_Conf::MsgCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_5fconnsvr_2eproto__INCLUDED
