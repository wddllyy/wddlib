// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_connsvr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_connsvr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConnSvr_Conf {

namespace {

const ::google::protobuf::Descriptor* StartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnsvrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnsvrMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_5fconnsvr_2eproto() {
  protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol_connsvr.proto");
  GOOGLE_CHECK(file != NULL);
  StartReq_descriptor_ = file->message_type(0);
  static const int StartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReq, currentconn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReq, channelcnt_),
  };
  StartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartReq_descriptor_,
      StartReq::default_instance_,
      StartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartReq));
  StartRsp_descriptor_ = file->message_type(1);
  static const int StartRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRsp, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRsp, routechannel_),
  };
  StartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartRsp_descriptor_,
      StartRsp::default_instance_,
      StartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartRsp));
  Stop_descriptor_ = file->message_type(2);
  static const int Stop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stop, timestamp_),
  };
  Stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stop_descriptor_,
      Stop::default_instance_,
      Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stop));
  Route_descriptor_ = file->message_type(3);
  static const int Route_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, routechannel_),
  };
  Route_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Route_descriptor_,
      Route::default_instance_,
      Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Route));
  MsgNtf_descriptor_ = file->message_type(4);
  static const int MsgNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNtf, buff_),
  };
  MsgNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNtf_descriptor_,
      MsgNtf::default_instance_,
      MsgNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNtf));
  MsgHead_descriptor_ = file->message_type(5);
  static const int MsgHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, connid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, ip_),
  };
  MsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHead));
  ConnsvrMsg_descriptor_ = file->message_type(6);
  static const int ConnsvrMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, startreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, startrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, msgntf_),
  };
  ConnsvrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnsvrMsg_descriptor_,
      ConnsvrMsg::default_instance_,
      ConnsvrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnsvrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnsvrMsg));
  MsgCmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_5fconnsvr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartReq_descriptor_, &StartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartRsp_descriptor_, &StartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stop_descriptor_, &Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Route_descriptor_, &Route::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNtf_descriptor_, &MsgNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnsvrMsg_descriptor_, &ConnsvrMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_5fconnsvr_2eproto() {
  delete StartReq::default_instance_;
  delete StartReq_reflection_;
  delete StartRsp::default_instance_;
  delete StartRsp_reflection_;
  delete Stop::default_instance_;
  delete Stop_reflection_;
  delete Route::default_instance_;
  delete Route_reflection_;
  delete MsgNtf::default_instance_;
  delete MsgNtf_reflection_;
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete ConnsvrMsg::default_instance_;
  delete ConnsvrMsg_reflection_;
}

void protobuf_AddDesc_protocol_5fconnsvr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::util::pbparser::protobuf_AddDesc_util_2fpbparser_2fUtilProtocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protocol_connsvr.proto\022\014ConnSvr_Conf\032 "
    "util/pbparser/UtilProtocol.proto\"3\n\010Star"
    "tReq\022\023\n\013currentconn\030\001 \002(\r\022\022\n\nchannelcnt\030"
    "\002 \002(\r\"0\n\010StartRsp\022\016\n\006accept\030\001 \002(\005\022\024\n\014rou"
    "techannel\030\002 \002(\r\"\031\n\004Stop\022\021\n\ttimestamp\030\001 \002"
    "(\004\"\035\n\005Route\022\024\n\014routechannel\030\001 \002(\r\"\026\n\006Msg"
    "Ntf\022\014\n\004buff\030\001 \002(\014\"B\n\007MsgHead\022\r\n\005cmdid\030\002 "
    "\002(\007\022\016\n\006connid\030\003 \002(\007\022\014\n\004port\030\004 \002(\r\022\n\n\002ip\030"
    "\005 \002(\t\"\371\001\n\nConnsvrMsg\022#\n\004head\030\001 \002(\0132\025.Con"
    "nSvr_Conf.MsgHead\022(\n\010startreq\030\002 \001(\0132\026.Co"
    "nnSvr_Conf.StartReq\022(\n\010startrsp\030\003 \001(\0132\026."
    "ConnSvr_Conf.StartRsp\022 \n\004stop\030\004 \001(\0132\022.Co"
    "nnSvr_Conf.Stop\022\"\n\005route\030\005 \001(\0132\023.ConnSvr"
    "_Conf.Route\022$\n\006msgntf\030\006 \001(\0132\024.ConnSvr_Co"
    "nf.MsgNtf:\006\212\265\030\002\010\001*\207\001\n\006MsgCmd\022\025\n\021connsvr_"
    "start_req\020\000\022\025\n\021connsvr_start_rsp\020\001\022\020\n\014co"
    "nnsvr_stop\020\002\022\021\n\rconnsvr_route\020\003\022\023\n\017conns"
    "vr_msg_ntf\020\004\022\025\n\021connsvr_cmd_count\020\005", 715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol_connsvr.proto", &protobuf_RegisterTypes);
  StartReq::default_instance_ = new StartReq();
  StartRsp::default_instance_ = new StartRsp();
  Stop::default_instance_ = new Stop();
  Route::default_instance_ = new Route();
  MsgNtf::default_instance_ = new MsgNtf();
  MsgHead::default_instance_ = new MsgHead();
  ConnsvrMsg::default_instance_ = new ConnsvrMsg();
  StartReq::default_instance_->InitAsDefaultInstance();
  StartRsp::default_instance_->InitAsDefaultInstance();
  Stop::default_instance_->InitAsDefaultInstance();
  Route::default_instance_->InitAsDefaultInstance();
  MsgNtf::default_instance_->InitAsDefaultInstance();
  MsgHead::default_instance_->InitAsDefaultInstance();
  ConnsvrMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5fconnsvr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5fconnsvr_2eproto {
  StaticDescriptorInitializer_protocol_5fconnsvr_2eproto() {
    protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  }
} static_descriptor_initializer_protocol_5fconnsvr_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCmd_descriptor_;
}
bool MsgCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StartReq::kCurrentconnFieldNumber;
const int StartReq::kChannelcntFieldNumber;
#endif  // !_MSC_VER

StartReq::StartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartReq::InitAsDefaultInstance() {
}

StartReq::StartReq(const StartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartReq::SharedCtor() {
  _cached_size_ = 0;
  currentconn_ = 0u;
  channelcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartReq::~StartReq() {
  SharedDtor();
}

void StartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartReq_descriptor_;
}

const StartReq& StartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

StartReq* StartReq::default_instance_ = NULL;

StartReq* StartReq::New() const {
  return new StartReq;
}

void StartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentconn_ = 0u;
    channelcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 currentconn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentconn_)));
          set_has_currentconn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channelcnt;
        break;
      }

      // required uint32 channelcnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelcnt_)));
          set_has_channelcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 currentconn = 1;
  if (has_currentconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currentconn(), output);
  }

  // required uint32 channelcnt = 2;
  if (has_channelcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 currentconn = 1;
  if (has_currentconn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currentconn(), target);
  }

  // required uint32 channelcnt = 2;
  if (has_channelcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 currentconn = 1;
    if (has_currentconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentconn());
    }

    // required uint32 channelcnt = 2;
    if (has_channelcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartReq::MergeFrom(const StartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentconn()) {
      set_currentconn(from.currentconn());
    }
    if (from.has_channelcnt()) {
      set_channelcnt(from.channelcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartReq::CopyFrom(const StartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartReq::Swap(StartReq* other) {
  if (other != this) {
    std::swap(currentconn_, other->currentconn_);
    std::swap(channelcnt_, other->channelcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartReq_descriptor_;
  metadata.reflection = StartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartRsp::kAcceptFieldNumber;
const int StartRsp::kRoutechannelFieldNumber;
#endif  // !_MSC_VER

StartRsp::StartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartRsp::InitAsDefaultInstance() {
}

StartRsp::StartRsp(const StartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartRsp::SharedCtor() {
  _cached_size_ = 0;
  accept_ = 0;
  routechannel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRsp::~StartRsp() {
  SharedDtor();
}

void StartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRsp_descriptor_;
}

const StartRsp& StartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

StartRsp* StartRsp::default_instance_ = NULL;

StartRsp* StartRsp::New() const {
  return new StartRsp;
}

void StartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_ = 0;
    routechannel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_routechannel;
        break;
      }

      // required uint32 routechannel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routechannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routechannel_)));
          set_has_routechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 accept = 1;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accept(), output);
  }

  // required uint32 routechannel = 2;
  if (has_routechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->routechannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 accept = 1;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accept(), target);
  }

  // required uint32 routechannel = 2;
  if (has_routechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->routechannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 accept = 1;
    if (has_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept());
    }

    // required uint32 routechannel = 2;
    if (has_routechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routechannel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartRsp::MergeFrom(const StartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accept()) {
      set_accept(from.accept());
    }
    if (from.has_routechannel()) {
      set_routechannel(from.routechannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRsp::CopyFrom(const StartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartRsp::Swap(StartRsp* other) {
  if (other != this) {
    std::swap(accept_, other->accept_);
    std::swap(routechannel_, other->routechannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRsp_descriptor_;
  metadata.reflection = StartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stop::kTimestampFieldNumber;
#endif  // !_MSC_VER

Stop::Stop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stop::InitAsDefaultInstance() {
}

Stop::Stop(const Stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stop::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stop::~Stop() {
  SharedDtor();
}

void Stop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stop_descriptor_;
}

const Stop& Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

Stop* Stop::default_instance_ = NULL;

Stop* Stop::New() const {
  return new Stop;
}

void Stop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Stop::Swap(Stop* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stop_descriptor_;
  metadata.reflection = Stop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Route::kRoutechannelFieldNumber;
#endif  // !_MSC_VER

Route::Route()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Route::InitAsDefaultInstance() {
}

Route::Route(const Route& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Route::SharedCtor() {
  _cached_size_ = 0;
  routechannel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Route::~Route() {
  SharedDtor();
}

void Route::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Route_descriptor_;
}

const Route& Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

Route* Route::default_instance_ = NULL;

Route* Route::New() const {
  return new Route;
}

void Route::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routechannel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 routechannel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routechannel_)));
          set_has_routechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 routechannel = 1;
  if (has_routechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->routechannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Route::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 routechannel = 1;
  if (has_routechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->routechannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Route::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 routechannel = 1;
    if (has_routechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routechannel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Route* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Route*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routechannel()) {
      set_routechannel(from.routechannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Route::Swap(Route* other) {
  if (other != this) {
    std::swap(routechannel_, other->routechannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Route_descriptor_;
  metadata.reflection = Route_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNtf::kBuffFieldNumber;
#endif  // !_MSC_VER

MsgNtf::MsgNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgNtf::InitAsDefaultInstance() {
}

MsgNtf::MsgNtf(const MsgNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgNtf::SharedCtor() {
  _cached_size_ = 0;
  buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNtf::~MsgNtf() {
  SharedDtor();
}

void MsgNtf::SharedDtor() {
  if (buff_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_;
  }
  if (this != default_instance_) {
  }
}

void MsgNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNtf_descriptor_;
}

const MsgNtf& MsgNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

MsgNtf* MsgNtf::default_instance_ = NULL;

MsgNtf* MsgNtf::New() const {
  return new MsgNtf;
}

void MsgNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buff()) {
      if (buff_ != &::google::protobuf::internal::kEmptyString) {
        buff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes buff = 1;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes buff = 1;
  if (has_buff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes buff = 1;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNtf::MergeFrom(const MsgNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNtf::CopyFrom(const MsgNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgNtf::Swap(MsgNtf* other) {
  if (other != this) {
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNtf_descriptor_;
  metadata.reflection = MsgNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHead::kCmdidFieldNumber;
const int MsgHead::kConnidFieldNumber;
const int MsgHead::kPortFieldNumber;
const int MsgHead::kIpFieldNumber;
#endif  // !_MSC_VER

MsgHead::MsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 0u;
  connid_ = 0u;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New() const {
  return new MsgHead;
}

void MsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmdid_ = 0u;
    connid_ = 0u;
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 cmdid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_connid;
        break;
      }

      // required fixed32 connid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_connid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connid_)));
          set_has_connid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // required string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->cmdid(), output);
  }

  // required fixed32 connid = 3;
  if (has_connid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->connid(), output);
  }

  // required uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->cmdid(), target);
  }

  // required fixed32 connid = 3;
  if (has_connid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->connid(), target);
  }

  // required uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 + 4;
    }

    // required fixed32 connid = 3;
    if (has_connid()) {
      total_size += 1 + 4;
    }

    // required uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_connid()) {
      set_connid(from.connid());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(connid_, other->connid_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnsvrMsg::kHeadFieldNumber;
const int ConnsvrMsg::kStartreqFieldNumber;
const int ConnsvrMsg::kStartrspFieldNumber;
const int ConnsvrMsg::kStopFieldNumber;
const int ConnsvrMsg::kRouteFieldNumber;
const int ConnsvrMsg::kMsgntfFieldNumber;
#endif  // !_MSC_VER

ConnsvrMsg::ConnsvrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnsvrMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::ConnSvr_Conf::MsgHead*>(&::ConnSvr_Conf::MsgHead::default_instance());
  startreq_ = const_cast< ::ConnSvr_Conf::StartReq*>(&::ConnSvr_Conf::StartReq::default_instance());
  startrsp_ = const_cast< ::ConnSvr_Conf::StartRsp*>(&::ConnSvr_Conf::StartRsp::default_instance());
  stop_ = const_cast< ::ConnSvr_Conf::Stop*>(&::ConnSvr_Conf::Stop::default_instance());
  route_ = const_cast< ::ConnSvr_Conf::Route*>(&::ConnSvr_Conf::Route::default_instance());
  msgntf_ = const_cast< ::ConnSvr_Conf::MsgNtf*>(&::ConnSvr_Conf::MsgNtf::default_instance());
}

ConnsvrMsg::ConnsvrMsg(const ConnsvrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnsvrMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  startreq_ = NULL;
  startrsp_ = NULL;
  stop_ = NULL;
  route_ = NULL;
  msgntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnsvrMsg::~ConnsvrMsg() {
  SharedDtor();
}

void ConnsvrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete startreq_;
    delete startrsp_;
    delete stop_;
    delete route_;
    delete msgntf_;
  }
}

void ConnsvrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnsvrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnsvrMsg_descriptor_;
}

const ConnsvrMsg& ConnsvrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fconnsvr_2eproto();
  return *default_instance_;
}

ConnsvrMsg* ConnsvrMsg::default_instance_ = NULL;

ConnsvrMsg* ConnsvrMsg::New() const {
  return new ConnsvrMsg;
}

void ConnsvrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ConnSvr_Conf::MsgHead::Clear();
    }
    if (has_startreq()) {
      if (startreq_ != NULL) startreq_->::ConnSvr_Conf::StartReq::Clear();
    }
    if (has_startrsp()) {
      if (startrsp_ != NULL) startrsp_->::ConnSvr_Conf::StartRsp::Clear();
    }
    if (has_stop()) {
      if (stop_ != NULL) stop_->::ConnSvr_Conf::Stop::Clear();
    }
    if (has_route()) {
      if (route_ != NULL) route_->::ConnSvr_Conf::Route::Clear();
    }
    if (has_msgntf()) {
      if (msgntf_ != NULL) msgntf_->::ConnSvr_Conf::MsgNtf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnsvrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConnSvr_Conf.MsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startreq;
        break;
      }

      // optional .ConnSvr_Conf.StartReq startreq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startrsp;
        break;
      }

      // optional .ConnSvr_Conf.StartRsp startrsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startrsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop;
        break;
      }

      // optional .ConnSvr_Conf.Stop stop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_route;
        break;
      }

      // optional .ConnSvr_Conf.Route route = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msgntf;
        break;
      }

      // optional .ConnSvr_Conf.MsgNtf msgntf = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnsvrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ConnSvr_Conf.MsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .ConnSvr_Conf.StartReq startreq = 2;
  if (has_startreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->startreq(), output);
  }

  // optional .ConnSvr_Conf.StartRsp startrsp = 3;
  if (has_startrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->startrsp(), output);
  }

  // optional .ConnSvr_Conf.Stop stop = 4;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stop(), output);
  }

  // optional .ConnSvr_Conf.Route route = 5;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->route(), output);
  }

  // optional .ConnSvr_Conf.MsgNtf msgntf = 6;
  if (has_msgntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msgntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnsvrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ConnSvr_Conf.MsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .ConnSvr_Conf.StartReq startreq = 2;
  if (has_startreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->startreq(), target);
  }

  // optional .ConnSvr_Conf.StartRsp startrsp = 3;
  if (has_startrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->startrsp(), target);
  }

  // optional .ConnSvr_Conf.Stop stop = 4;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stop(), target);
  }

  // optional .ConnSvr_Conf.Route route = 5;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->route(), target);
  }

  // optional .ConnSvr_Conf.MsgNtf msgntf = 6;
  if (has_msgntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msgntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnsvrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConnSvr_Conf.MsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .ConnSvr_Conf.StartReq startreq = 2;
    if (has_startreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startreq());
    }

    // optional .ConnSvr_Conf.StartRsp startrsp = 3;
    if (has_startrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startrsp());
    }

    // optional .ConnSvr_Conf.Stop stop = 4;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop());
    }

    // optional .ConnSvr_Conf.Route route = 5;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route());
    }

    // optional .ConnSvr_Conf.MsgNtf msgntf = 6;
    if (has_msgntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnsvrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnsvrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnsvrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnsvrMsg::MergeFrom(const ConnsvrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ConnSvr_Conf::MsgHead::MergeFrom(from.head());
    }
    if (from.has_startreq()) {
      mutable_startreq()->::ConnSvr_Conf::StartReq::MergeFrom(from.startreq());
    }
    if (from.has_startrsp()) {
      mutable_startrsp()->::ConnSvr_Conf::StartRsp::MergeFrom(from.startrsp());
    }
    if (from.has_stop()) {
      mutable_stop()->::ConnSvr_Conf::Stop::MergeFrom(from.stop());
    }
    if (from.has_route()) {
      mutable_route()->::ConnSvr_Conf::Route::MergeFrom(from.route());
    }
    if (from.has_msgntf()) {
      mutable_msgntf()->::ConnSvr_Conf::MsgNtf::MergeFrom(from.msgntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnsvrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnsvrMsg::CopyFrom(const ConnsvrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnsvrMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_startreq()) {
    if (!this->startreq().IsInitialized()) return false;
  }
  if (has_startrsp()) {
    if (!this->startrsp().IsInitialized()) return false;
  }
  if (has_stop()) {
    if (!this->stop().IsInitialized()) return false;
  }
  if (has_route()) {
    if (!this->route().IsInitialized()) return false;
  }
  if (has_msgntf()) {
    if (!this->msgntf().IsInitialized()) return false;
  }
  return true;
}

void ConnsvrMsg::Swap(ConnsvrMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(startreq_, other->startreq_);
    std::swap(startrsp_, other->startrsp_);
    std::swap(stop_, other->stop_);
    std::swap(route_, other->route_);
    std::swap(msgntf_, other->msgntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnsvrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnsvrMsg_descriptor_;
  metadata.reflection = ConnsvrMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnSvr_Conf

// @@protoc_insertion_point(global_scope)
