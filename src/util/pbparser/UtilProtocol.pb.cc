// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/pbparser/UtilProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "util/pbparser/UtilProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace util {
namespace pbparser {

namespace {

const ::google::protobuf::Descriptor* ProtocolPacketOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolPacketOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolSwitch_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_util_2fpbparser_2fUtilProtocol_2eproto() {
  protobuf_AddDesc_util_2fpbparser_2fUtilProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "util/pbparser/UtilProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolPacketOptions_descriptor_ = file->message_type(0);
  static const int ProtocolPacketOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolPacketOptions, protocolpacket_),
  };
  ProtocolPacketOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolPacketOptions_descriptor_,
      ProtocolPacketOptions::default_instance_,
      ProtocolPacketOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolPacketOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolPacketOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolPacketOptions));
  ProtocolSwitch_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_util_2fpbparser_2fUtilProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolPacketOptions_descriptor_, &ProtocolPacketOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_util_2fpbparser_2fUtilProtocol_2eproto() {
  delete ProtocolPacketOptions::default_instance_;
  delete ProtocolPacketOptions_reflection_;
}

void protobuf_AddDesc_util_2fpbparser_2fUtilProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n util/pbparser/UtilProtocol.proto\022\rutil"
    ".pbparser\032 google/protobuf/descriptor.pr"
    "oto\"[\n\025ProtocolPacketOptions\022B\n\016Protocol"
    "Packet\030\001 \001(\0162\035.util.pbparser.ProtocolSwi"
    "tch:\013protocol_no*3\n\016ProtocolSwitch\022\017\n\013pr"
    "otocol_no\020\000\022\020\n\014protocol_yes\020\001:^\n\rPacketO"
    "ptions\022\037.google.protobuf.MessageOptions\030"
    "\321\206\003 \001(\0132$.util.pbparser.ProtocolPacketOp"
    "tions", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "util/pbparser/UtilProtocol.proto", &protobuf_RegisterTypes);
  ProtocolPacketOptions::default_instance_ = new ProtocolPacketOptions();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    50001, 11, false, false,
    &::util::pbparser::ProtocolPacketOptions::default_instance());
  ProtocolPacketOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_util_2fpbparser_2fUtilProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_util_2fpbparser_2fUtilProtocol_2eproto {
  StaticDescriptorInitializer_util_2fpbparser_2fUtilProtocol_2eproto() {
    protobuf_AddDesc_util_2fpbparser_2fUtilProtocol_2eproto();
  }
} static_descriptor_initializer_util_2fpbparser_2fUtilProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtocolSwitch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSwitch_descriptor_;
}
bool ProtocolSwitch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ProtocolPacketOptions::kProtocolPacketFieldNumber;
#endif  // !_MSC_VER

ProtocolPacketOptions::ProtocolPacketOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolPacketOptions::InitAsDefaultInstance() {
}

ProtocolPacketOptions::ProtocolPacketOptions(const ProtocolPacketOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolPacketOptions::SharedCtor() {
  _cached_size_ = 0;
  protocolpacket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolPacketOptions::~ProtocolPacketOptions() {
  SharedDtor();
}

void ProtocolPacketOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtocolPacketOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolPacketOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolPacketOptions_descriptor_;
}

const ProtocolPacketOptions& ProtocolPacketOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fpbparser_2fUtilProtocol_2eproto();
  return *default_instance_;
}

ProtocolPacketOptions* ProtocolPacketOptions::default_instance_ = NULL;

ProtocolPacketOptions* ProtocolPacketOptions::New() const {
  return new ProtocolPacketOptions;
}

void ProtocolPacketOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocolpacket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolPacketOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .util.pbparser.ProtocolSwitch ProtocolPacket = 1 [default = protocol_no];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::util::pbparser::ProtocolSwitch_IsValid(value)) {
            set_protocolpacket(static_cast< ::util::pbparser::ProtocolSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolPacketOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .util.pbparser.ProtocolSwitch ProtocolPacket = 1 [default = protocol_no];
  if (has_protocolpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocolpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolPacketOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .util.pbparser.ProtocolSwitch ProtocolPacket = 1 [default = protocol_no];
  if (has_protocolpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocolpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolPacketOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .util.pbparser.ProtocolSwitch ProtocolPacket = 1 [default = protocol_no];
    if (has_protocolpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocolpacket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolPacketOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolPacketOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolPacketOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolPacketOptions::MergeFrom(const ProtocolPacketOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolpacket()) {
      set_protocolpacket(from.protocolpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolPacketOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolPacketOptions::CopyFrom(const ProtocolPacketOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolPacketOptions::IsInitialized() const {

  return true;
}

void ProtocolPacketOptions::Swap(ProtocolPacketOptions* other) {
  if (other != this) {
    std::swap(protocolpacket_, other->protocolpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolPacketOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolPacketOptions_descriptor_;
  metadata.reflection = ProtocolPacketOptions_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::util::pbparser::ProtocolPacketOptions >, 11, false >
  PacketOptions(kPacketOptionsFieldNumber, ::util::pbparser::ProtocolPacketOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbparser
}  // namespace util

// @@protoc_insertion_point(global_scope)
